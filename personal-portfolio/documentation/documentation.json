{
    "pipes": [],
    "interfaces": [
        {
            "name": "Experience",
            "id": "interface-Experience-82d77eb8adbce65f5e6734cec15eac732a05b8328ec43b58d69124e0c4e30bcf6784295621ae15dcf57a3b77e796446581fe3cea3daa16ad054eced0b8e5c9fc",
            "file": "src/app/shared/models/experience.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Experience {\r\n  _id: string;\r\n  title: string;\r\n  startDate: string;\r\n  endDate: string;\r\n  skills: string;\r\n  description: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "skills",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Project",
            "id": "interface-Project-ed38143d179e9a63fefb7bb28db7b718a67c32d8647e7b102295787eb16462f95927ca654cb185aca97cf4de47841b3cc46fad751227a5c7ac38f6a16a22ffde",
            "file": "src/app/shared/models/project.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Project {\r\n  _id: string;\r\n  image: string;\r\n  title: string;\r\n  category: string;\r\n  description: string;\r\n  link: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-0ea949dfa9ba429345b33156d0624773351d9f923813b96e286230777891d2e8a69464f5a1fc218fbfaf35339ab2be4106020aa133a8754339291b26b2e21eac",
            "file": "src/app/shared/models/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  uid: string;\r\n  email: string;\r\n  displayName: string;\r\n  photoURL: string;\r\n  emailVerified: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "emailVerified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "photoURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "uid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-cbae16e6a082d5240413686abc53807679658db0f501d68a8d7c83116c6d3b75c3bd8ce5688c6499313f56abb29b0685a123653e200b868dabfbaa0fd156e857",
            "file": "src/app/shared/guard/auth.guard.ts",
            "properties": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | UrlTree | boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  Router,\r\n  UrlTree,\r\n} from '@angular/router';\r\nimport { AuthService } from '../../shared/services/auth.service';\r\nimport { Observable } from 'rxjs';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard {\r\n  constructor(public authService: AuthService, public router: Router) {}\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | UrlTree | boolean {\r\n    if (this.authService.isLoggedIn !== true) {\r\n      this.router.navigate(['login']);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-10c3a9ba83e8cd7e0e651c908755afd79c2f081d9c97f84b7c2bb40c07e8f7bf017d1ca42a7c0a16220e50e563cb820cf152cba58f128773dbad104d7ffb1151",
            "file": "src/app/shared/services/auth.service.ts",
            "properties": [
                {
                    "name": "afAuth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AngularFireAuth",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "afs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AngularFirestore",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngZone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "userData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "forgotPassword",
                    "args": [
                        {
                            "name": "passwordResetEmail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "passwordResetEmail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIdToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string | null>",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendVerificationMail",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "setUserData",
                    "args": [
                        {
                            "name": "user",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, NgZone } from '@angular/core';\r\n\r\nimport {\r\n  AngularFirestore,\r\n  AngularFirestoreDocument,\r\n} from '@angular/fire/compat/firestore';\r\n\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\r\nimport { Router } from '@angular/router';\r\nimport { User } from '../models/user.model';\r\nimport { Observable } from 'rxjs';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  userData: any; // Save logged in user data\r\n  constructor(\r\n    public afs: AngularFirestore, // Inject Firestore service\r\n    public afAuth: AngularFireAuth, // Inject Firebase auth service\r\n    public router: Router,\r\n    public ngZone: NgZone // NgZone service to remove outside scope warning\r\n  ) {\r\n    /* Saving user data in localstorage when \r\n    logged in and setting up null when logged out */\r\n    this.afAuth.authState.subscribe((user) => {\r\n      if (user) {\r\n        this.userData = user;\r\n        localStorage.setItem('user', JSON.stringify(this.userData));\r\n        JSON.parse(localStorage.getItem('user')!);\r\n      } else {\r\n        localStorage.setItem('user', 'null');\r\n        JSON.parse(localStorage.getItem('user')!);\r\n      }\r\n    });\r\n  }\r\n  // Sign in with email/password\r\n  async login(email: string, password: string) {\r\n    try {\r\n      const result = await this.afAuth.signInWithEmailAndPassword(\r\n        email,\r\n        password\r\n      );\r\n      this.setUserData(result.user);\r\n      this.afAuth.authState.subscribe((user_1) => {\r\n        if (user_1) {\r\n          this.router.navigate(['']);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      window.alert(error.message);\r\n    }\r\n  }\r\n  // Sign up with email/password\r\n  async signUp(email: string, password: string) {\r\n    try {\r\n      const result = await this.afAuth.createUserWithEmailAndPassword(\r\n        email,\r\n        password\r\n      );\r\n      /* Call the SendVerificaitonMail() function when new user sign\r\n      up and returns promise */\r\n      this.sendVerificationMail();\r\n      this.setUserData(result.user);\r\n    } catch (error) {\r\n      window.alert(error.message);\r\n    }\r\n  }\r\n  // Send email verfificaiton when new user sign up\r\n  async sendVerificationMail() {\r\n    return this.afAuth.currentUser\r\n      .then((u: any) => u.sendEmailVerification())\r\n      .then(() => {\r\n        this.router.navigate(['verify-email-address']);\r\n      });\r\n  }\r\n  // Reset Forggot password\r\n  async forgotPassword(passwordResetEmail: string) {\r\n    return this.afAuth\r\n      .sendPasswordResetEmail(passwordResetEmail)\r\n      .then(() => {\r\n        window.alert('Password reset email sent, check your inbox.');\r\n      })\r\n      .catch((error) => {\r\n        window.alert(error);\r\n      });\r\n  }\r\n  // Returns true when user is looged in and email is verified\r\n  get isLoggedIn(): boolean {\r\n    const user = JSON.parse(localStorage.getItem('user')!);\r\n    return user !== null && user.emailVerified !== false ? true : false;\r\n  }\r\n  /* Setting up user data when sign in with username/password, \r\n  sign up with username/password and sign in with social auth  \r\n  provider in Firestore database using AngularFirestore + AngularFirestoreDocument service */\r\n  setUserData(user: any) {\r\n    const userRef: AngularFirestoreDocument<any> = this.afs.doc(\r\n      `users/${user.uid}`\r\n    );\r\n    console.log('userreffucj ', user);\r\n    const userData: User = {\r\n      uid: user.uid,\r\n      email: user.email,\r\n      displayName: user.displayName,\r\n      photoURL: user.photoURL,\r\n      emailVerified: user.emailVerified,\r\n    };\r\n    return userRef.set(userData, {\r\n      merge: true,\r\n    });\r\n  }\r\n  // Sign out\r\n  async signOut() {\r\n    await this.afAuth.signOut();\r\n    localStorage.removeItem('user');\r\n    this.router.navigate(['login']);\r\n  }\r\n\r\n  getIdToken(): Observable<string | null> {\r\n    return this.afAuth.idToken;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isLoggedIn": {
                    "name": "isLoggedIn",
                    "getSignature": {
                        "name": "isLoggedIn",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 88
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ExperienceService",
            "id": "injectable-ExperienceService-9630068abb1aded7cde273115c0106788b02719a9eda54092f0b1003bd117b2d8f2ab0e7a7a045dd82f1ffab03a2f3f275528318bd15eb42a50c8c3fd035bcf0",
            "file": "src/app/shared/services/experience.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'https://abhay-personal-portfolio-backend.onrender.com/api/experiences'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addExperience",
                    "args": [
                        {
                            "name": "experience",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "experience",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteExperience",
                    "args": [
                        {
                            "name": "experienceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "experienceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExperienceById",
                    "args": [
                        {
                            "name": "experienceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "experienceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExperiences",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateExperience",
                    "args": [
                        {
                            "name": "experienceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updatedExperience",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "experienceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updatedExperience",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ExperienceService {\r\n  private apiUrl =\r\n    'https://abhay-personal-portfolio-backend.onrender.com/api/experiences';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getExperiences(): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}`);\r\n  }\r\n\r\n  getExperienceById(experienceId: string): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/${experienceId}`);\r\n  }\r\n\r\n  addExperience(experience: any): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/add`, experience);\r\n  }\r\n\r\n  updateExperience(\r\n    experienceId: string,\r\n    updatedExperience: any\r\n  ): Observable<any> {\r\n    return this.http.put<any>(\r\n      `${this.apiUrl}/update/${experienceId}`,\r\n      updatedExperience\r\n    );\r\n  }\r\n\r\n  deleteExperience(experienceId: string): Observable<any> {\r\n    return this.http.delete<any>(`${this.apiUrl}/delete/${experienceId}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProjectService",
            "id": "injectable-ProjectService-f915ce8f60b6d6c3b61703d4e81a33ac3b663d9fa3a294d094777e76e6e380a5725ddd2c7d7154009f579d1a9d53c6610c9c8c560cdf0c3b96da5d19f1f1800f",
            "file": "src/app/shared/services/project.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'https://abhay-personal-portfolio-backend.onrender.com/api/projects'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProject",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjectById",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateProject",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updatedProject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updatedProject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProjectService {\r\n  private apiUrl =\r\n    'https://abhay-personal-portfolio-backend.onrender.com/api/projects';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getProjects(): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}`);\r\n  }\r\n\r\n  getProjectById(projectId: string): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/${projectId}`);\r\n  }\r\n\r\n  addProject(project: any): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/add`, project);\r\n  }\r\n\r\n  updateProject(projectId: string, updatedProject: any): Observable<any> {\r\n    return this.http.put<any>(\r\n      `${this.apiUrl}/update/${projectId}`,\r\n      updatedProject\r\n    );\r\n  }\r\n\r\n  deleteProject(projectId: string): Observable<any> {\r\n    return this.http.delete<any>(`${this.apiUrl}/delete/${projectId}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-e3bc8c8725a412df38b8e2ecd3a0a6a29be66632b2dcce32c4fdfa83307c9550fb2585b742210f13e97b835c8c395a374a7c656055d0c58e5ba6f0c53eaa7b5a",
            "file": "src/app/shared/interceptor/auth.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n} from '@angular/common/http';\r\nimport { Observable, switchMap } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return this.authService.getIdToken().pipe(\r\n      switchMap((idToken: string | null) => {\r\n        if (idToken) {\r\n          request = request.clone({\r\n            setHeaders: {\r\n              Authorization: `Bearer ${idToken}`,\r\n            },\r\n          });\r\n        }\r\n        return next.handle(request);\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "interceptor"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AboutComponent",
            "id": "component-AboutComponent-f2a89d6d29f041e8747164909cb596d436a53d869747f4db75a101c5dda46aa3cb1fafe2065762742038f6647d2a7a0db6e3dd013fa5d32a665c0df9a7fb1063",
            "file": "src/app/components/about/about.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-about",
            "styleUrls": [
                "./about.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./about.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'About'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'app-about',\r\n  templateUrl: './about.component.html',\r\n  styleUrls: ['./about.component.css'],\r\n})\r\nexport class AboutComponent implements OnInit {\r\n  title = 'About';\r\n  constructor(private titleService: Title) {}\r\n  ngOnInit(): void {\r\n    this.titleService.setTitle(this.title);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./about.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"section about\" aria-label=\"about me\">\r\n  <div class=\"container\">\r\n    <figure class=\"about-banner\">\r\n      <img\r\n        src=\"assets/images/admin.jpg\"\r\n        width=\"580\"\r\n        height=\"554\"\r\n        loading=\"lazy\"\r\n        alt=\"photo\"\r\n        class=\"w-100\"\r\n      />\r\n    </figure>\r\n\r\n    <div class=\"about-content\">\r\n      <h2 class=\"title-lg\">\r\n        I'm a Full Stack Developer with 1 year of experience.\r\n      </h2>\r\n\r\n      <p class=\"body-md section-text\">\r\n        I'm a Full-Stack Developer with 1 year of experience. I'm currently\r\n        working as a Trainee at Nagarro. I am experienced in Angular and .Net\r\n        Web Applications. In addition to that i have also worked in ReactJs,\r\n        NodeJs, MongoDb, AWS and Azure.\r\n      </p>\r\n\r\n      <ul class=\"about-list\">\r\n        <li>\r\n          <p class=\"list-text\">\r\n            <strong class=\"strong title-md\">10+</strong> Projet Completed\r\n          </p>\r\n        </li>\r\n\r\n        <li>\r\n          <p class=\"list-text\">\r\n            <strong class=\"strong title-md\">10+</strong> Happy Clients\r\n          </p>\r\n        </li>\r\n      </ul>\r\n\r\n      <div class=\"wrapper\">\r\n        <a routerLink=\"/contact\" class=\"btn btn-primary\">Contact Me</a>\r\n\r\n        <a routerLink=\"/project\" class=\"btn btn-secondary\">Projects</a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n\r\n<section class=\"section skill\" aria-labelledby=\"skill-label\">\r\n  <div class=\"container\">\r\n    <div class=\"skill-content\">\r\n      <h2 class=\"section-title headline-md\" id=\"skill-label\">My Skills</h2>\r\n\r\n      <ul class=\"skill-list\">\r\n        <li>\r\n          <div\r\n            class=\"card card-sm\"\r\n            style=\"background-color: hsl(177, 39%, 72%)\"\r\n          >\r\n            <div class=\"card-media\">\r\n              <ion-icon name=\"logo-html5\"></ion-icon>\r\n            </div>\r\n\r\n            <h2 class=\"card-title\">HTML</h2>\r\n          </div>\r\n        </li>\r\n\r\n        <li>\r\n          <div class=\"card card-sm\" style=\"background-color: hsl(41, 99%, 64%)\">\r\n            <div class=\"card-media\">\r\n              <ion-icon name=\"logo-css3\"></ion-icon>\r\n            </div>\r\n\r\n            <h2 class=\"card-title\">CSS</h2>\r\n          </div>\r\n        </li>\r\n\r\n        <li>\r\n          <div class=\"card card-sm\" style=\"background-color: hsl(19, 97%, 85%)\">\r\n            <div class=\"card-media\">\r\n              <ion-icon name=\"logo-react\"></ion-icon>\r\n            </div>\r\n\r\n            <h2 class=\"card-title\">React JS</h2>\r\n          </div>\r\n        </li>\r\n\r\n        <li>\r\n          <div\r\n            class=\"card card-sm\"\r\n            style=\"background-color: hsl(221, 100%, 79%)\"\r\n          >\r\n            <div class=\"card-media\">\r\n              <ion-icon name=\"logo-angular\"></ion-icon>\r\n            </div>\r\n\r\n            <h2 class=\"card-title\">Angular</h2>\r\n          </div>\r\n        </li>\r\n\r\n        <li>\r\n          <div class=\"card card-sm\" style=\"background-color: hsl(76, 39%, 72%)\">\r\n            <div class=\"card-media\">\r\n              <ion-icon name=\"logo-nodejs\"></ion-icon>\r\n            </div>\r\n\r\n            <h2 class=\"card-title\">Node JS</h2>\r\n          </div>\r\n        </li>\r\n\r\n        <li>\r\n          <div\r\n            class=\"card card-sm\"\r\n            style=\"background-color: hsl(245, 100%, 90%)\"\r\n          >\r\n            <div class=\"card-media\">\r\n              <ion-icon name=\"logo-microsoft\"></ion-icon>\r\n            </div>\r\n\r\n            <h2 class=\"card-title\">.NET</h2>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <figure class=\"skill-banner\">\r\n      <img\r\n        src=\"assets/images/admin.jpg\"\r\n        width=\"581\"\r\n        height=\"657\"\r\n        loading=\"lazy\"\r\n        alt=\"Photo \"\r\n        class=\"w-100\"\r\n      />\r\n    </figure>\r\n  </div>\r\n</section>\r\n\r\n<app-experience></app-experience>\r\n\r\n<section class=\"cta\">\r\n  <div class=\"container\">\r\n    <h2 class=\"title-lg\">Interested in working with me?</h2>\r\n\r\n    <a routerLink=\"/contact\" class=\"btn btn-tertiary\">Contact Now</a>\r\n  </div>\r\n</section>\r\n\r\n<section class=\"section testi\" aria-labelledby=\"testi-label\">\r\n  <div class=\"container\">\r\n    <h2 class=\"headline-md section-title text-center\" id=\"testi-label\">\r\n      Testimonial\r\n    </h2>\r\n\r\n    <ul class=\"slider\">\r\n      <li class=\"slider-item card-container\">\r\n        <div class=\"card card-lg\">\r\n          <figure class=\"card-media\">\r\n            <img\r\n              src=\"assets/images/testi-1.jpg\"\r\n              width=\"100\"\r\n              height=\"100\"\r\n              loading=\"lazy\"\r\n              alt=\"Jennifer Lutheran\"\r\n              class=\"img-cover\"\r\n            />\r\n          </figure>\r\n\r\n          <div class=\"card-content\">\r\n            <blockquote class=\"body-sm\">\r\n              Dolor lorem is simply dummy text of the printing and typesetting\r\n              industry. Lorem Ipsum has been the industry's standard dummy text\r\n              ever since the 1500s.\r\n            </blockquote>\r\n\r\n            <p class=\"client-name\">Jennifer Lutheran</p>\r\n\r\n            <p class=\"client-title\">CEO at pxdraft</p>\r\n          </div>\r\n        </div>\r\n      </li>\r\n\r\n      <li class=\"slider-item card-container\">\r\n        <div class=\"card card-lg\">\r\n          <figure class=\"card-media\">\r\n            <img\r\n              src=\"assets/images/testi-2.jpg\"\r\n              width=\"100\"\r\n              height=\"100\"\r\n              loading=\"lazy\"\r\n              alt=\"Jennifer Lutheran\"\r\n              class=\"img-cover\"\r\n            />\r\n          </figure>\r\n\r\n          <div class=\"card-content\">\r\n            <blockquote class=\"body-sm\">\r\n              Dolor lorem is simply dummy text of the printing and typesetting\r\n              industry. Lorem Ipsum has been the industry's standard dummy text\r\n              ever since the 1500s.\r\n            </blockquote>\r\n\r\n            <p class=\"client-name\">Jennifer Lutheran</p>\r\n\r\n            <p class=\"client-title\">CEO at pxdraft</p>\r\n          </div>\r\n        </div>\r\n      </li>\r\n\r\n      <li class=\"slider-item card-container\">\r\n        <div class=\"card card-lg\">\r\n          <figure class=\"card-media\">\r\n            <img\r\n              src=\"assets/images/testi-3.jpg\"\r\n              width=\"100\"\r\n              height=\"100\"\r\n              loading=\"lazy\"\r\n              alt=\"Jennifer Lutheran\"\r\n              class=\"img-cover\"\r\n            />\r\n          </figure>\r\n\r\n          <div class=\"card-content\">\r\n            <blockquote class=\"body-sm\">\r\n              Dolor lorem is simply dummy text of the printing and typesetting\r\n              industry. Lorem Ipsum has been the industry's standard dummy text\r\n              ever since the 1500s.\r\n            </blockquote>\r\n\r\n            <p class=\"client-name\">Jennifer Lutheran</p>\r\n\r\n            <p class=\"client-title\">CEO at pxdraft</p>\r\n          </div>\r\n        </div>\r\n      </li>\r\n\r\n      <li class=\"slider-item card-container\">\r\n        <div class=\"card card-lg\">\r\n          <figure class=\"card-media\">\r\n            <img\r\n              src=\"assets/images/testi-4.jpg\"\r\n              width=\"100\"\r\n              height=\"100\"\r\n              loading=\"lazy\"\r\n              alt=\"Jennifer Lutheran\"\r\n              class=\"img-cover\"\r\n            />\r\n          </figure>\r\n\r\n          <div class=\"card-content\">\r\n            <blockquote class=\"body-sm\">\r\n              Dolor lorem is simply dummy text of the printing and typesetting\r\n              industry. Lorem Ipsum has been the industry's standard dummy text\r\n              ever since the 1500s.\r\n            </blockquote>\r\n\r\n            <p class=\"client-name\">Jassa Lutheran</p>\r\n\r\n            <p class=\"client-title\">CEO at pxdraft</p>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</section>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-374316f9c865f6db87f9ba51b6e43e316657ac5a043cf121ac737996bc03d7f3b7883d66edd246212641a3053bfe8f4e27cd35b2ab01b3e4339d427f018d48bd",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n})\r\nexport class AppComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<app-navbar></app-navbar> <router-outlet></router-outlet>\r\n<app-footer></app-footer>\r\n"
        },
        {
            "name": "ContactComponent",
            "id": "component-ContactComponent-52a9fd68d00ea8b768bb27e491e27559ecc28d9cd209bff6feb523bf3b63b08b5993e9640187857cc1427ed92bd3455d652a5c0925e5cc3d8268477f158005a4",
            "file": "src/app/components/contact/contact.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contact",
            "styleUrls": [
                "./contact.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./contact.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Contact'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendEmail",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport emailjs, { type EmailJSResponseStatus } from '@emailjs/browser';\r\n\r\n@Component({\r\n  selector: 'app-contact',\r\n  templateUrl: './contact.component.html',\r\n  styleUrls: ['./contact.component.css'],\r\n})\r\nexport class ContactComponent implements OnInit {\r\n  title = 'Contact';\r\n  constructor(private titleService: Title) {}\r\n  ngOnInit(): void {\r\n    this.titleService.setTitle(this.title);\r\n  }\r\n\r\n  sendEmail(e: Event) {\r\n    //e.preventDefault();\r\n\r\n    emailjs\r\n      .sendForm('abhay-gmail', 'template_1', e.target as HTMLFormElement, {\r\n        publicKey: 'Q0X87M2Clf6Vbb5ou',\r\n      })\r\n      .then(\r\n        () => {\r\n          console.log('SUCCESS!');\r\n          console.log(e, ' he ', e.target);\r\n          alert('Message Sent Successfully');\r\n          this.ngOnInit();\r\n        },\r\n        (error) => {\r\n          console.log('FAILED...', (error as EmailJSResponseStatus).text);\r\n        }\r\n      );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./contact.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"section contact has-bg-image\" aria-labelledby=\"contact-label\">\r\n  <div class=\"container\">\r\n    <form (ngSubmit)=\"sendEmail($event)\" class=\"contact-form\" ngNativeValidate>\r\n      <h2 class=\"headline-sm\" id=\"contact-label\">Get in touch</h2>\r\n\r\n      <p class=\"contact-text body-md\">I would love to hear from you.</p>\r\n\r\n      <div class=\"wrapper\">\r\n        <div>\r\n          <label for=\"name\" class=\"label\">First name</label>\r\n\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            id=\"name\"\r\n            placeholder=\"Name *\"\r\n            required\r\n            class=\"input-field\"\r\n            maxlength=\"20\"\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label for=\"email\" class=\"label\">Your Email </label>\r\n\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            id=\"email\"\r\n            placeholder=\"Email *\"\r\n            required\r\n            class=\"input-field\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <label for=\"subject\" class=\"label\">Subject</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"subject\"\r\n        id=\"subject\"\r\n        placeholder=\"Subject *\"\r\n        class=\"input-field\"\r\n        required\r\n        maxlength=\"30\"\r\n      />\r\n\r\n      <label for=\"message\" class=\"label\">Your message </label>\r\n      <textarea\r\n        name=\"message\"\r\n        id=\"message\"\r\n        placeholder=\"Your message *\"\r\n        required\r\n        class=\"input-field\"\r\n        maxlength=\"250\"\r\n      ></textarea>\r\n\r\n      <button class=\"btn btn-tertiary\">Send Message</button>\r\n    </form>\r\n\r\n    <div class=\"contact-content\">\r\n      <ul class=\"contact-list\">\r\n        <li class=\"contact-item\">\r\n          <div class=\"item-icon\" style=\"background-color: hsl(177, 39%, 72%)\">\r\n            <ion-icon name=\"call\" aria-hidden=\"true\"></ion-icon>\r\n          </div>\r\n\r\n          <div>\r\n            <p class=\"label-lg\">Phone</p>\r\n\r\n            <a href=\"tel:+011236548096\" class=\"body-lg\">+0 123 456 789</a>\r\n          </div>\r\n        </li>\r\n\r\n        <li class=\"contact-item\">\r\n          <div class=\"item-icon\" style=\"background-color: hsl(41, 99%, 64%)\">\r\n            <ion-icon name=\"mail\" aria-hidden=\"true\"></ion-icon>\r\n          </div>\r\n\r\n          <div>\r\n            <p class=\"label-lg\">Mail</p>\r\n\r\n            <a href=\"mailto:1903480130001it@gmail.com\" class=\"body-lg\"\r\n              >1903480130001it@gmail.com</a\r\n            >\r\n          </div>\r\n        </li>\r\n\r\n        <li class=\"contact-item\">\r\n          <div class=\"item-icon\" style=\"background-color: hsl(19, 97%, 85%)\">\r\n            <ion-icon name=\"location\" aria-hidden=\"true\"></ion-icon>\r\n          </div>\r\n\r\n          <div>\r\n            <p class=\"label-lg\">Visit My Studio</p>\r\n\r\n            <address class=\"body-lg\">Kanpur, Uttar Pradesh, India</address>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</section>\r\n"
        },
        {
            "name": "ExperienceComponent",
            "id": "component-ExperienceComponent-ad59f545be97db1d0e34e1dbe6248716096361848e20996ea44ce2bbc4fa089baed8bb13ae4777914d54cb16f950a80f407d75624d15f3aa470577a2b8c6b2db",
            "file": "src/app/components/experience/experience.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-experience",
            "styleUrls": [
                "./experience.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./experience.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addEditButtonText",
                    "defaultValue": "'Add Experience'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "editIndex",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "experiences",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Experience[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "formElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'experienceForm'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "newExperience",
                    "defaultValue": "{\r\n    _id: '',\r\n    title: '',\r\n    startDate: '',\r\n    endDate: '',\r\n    skills: '',\r\n    description: '',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Experience",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "showAddForm",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "addExperience",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteExperience",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editExperience",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchExperiences",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleAddForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { Experience } from 'src/app/shared/models/experience.model';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\nimport { ExperienceService } from 'src/app/shared/services/experience.service';\r\n\r\n@Component({\r\n  selector: 'app-experience',\r\n  templateUrl: './experience.component.html',\r\n  styleUrls: ['./experience.component.css'],\r\n})\r\nexport class ExperienceComponent {\r\n  constructor(\r\n    public authService: AuthService,\r\n    private experienceService: ExperienceService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.fetchExperiences(); // Call getExperiences during component initialization\r\n  }\r\n\r\n  experiences: Experience[] = [];\r\n  loading = true;\r\n  showAddForm = false;\r\n  newExperience: Experience = {\r\n    _id: '',\r\n    title: '',\r\n    startDate: '',\r\n    endDate: '',\r\n    skills: '',\r\n    description: '',\r\n  };\r\n\r\n  editIndex: number | null = null;\r\n\r\n  toggleAddForm() {\r\n    this.showAddForm = !this.showAddForm;\r\n    this.editIndex = null;\r\n  }\r\n\r\n  addExperience() {\r\n    if (this.editIndex !== null) {\r\n      console.log('inside edit');\r\n      this.experienceService\r\n        .updateExperience(\r\n          this.experiences[this.editIndex]._id,\r\n          this.newExperience\r\n        )\r\n        .subscribe({\r\n          next: () => {\r\n            this.fetchExperiences(); // Fetch updated experiences after updating\r\n            console.log('Experience updated successfully');\r\n          },\r\n          error: (error) => {\r\n            console.error('Error updating experience:', error);\r\n          },\r\n        });\r\n    } else {\r\n      this.experienceService.addExperience(this.newExperience).subscribe({\r\n        next: () => {\r\n          this.fetchExperiences(); // Fetch updated experiences after adding\r\n          console.log('Experience added successfully');\r\n        },\r\n        error: (error) => {\r\n          console.error('Error adding experience:', error);\r\n        },\r\n      });\r\n    }\r\n\r\n    this.showAddForm = false;\r\n    this.editIndex = null;\r\n    this.newExperience = {\r\n      _id: '',\r\n      title: '',\r\n      startDate: '',\r\n      endDate: '',\r\n      skills: '',\r\n      description: '',\r\n    };\r\n    this.addEditButtonText = 'Add Experience';\r\n  }\r\n\r\n  addEditButtonText = 'Add Experience';\r\n  @ViewChild('experienceForm') formElement: ElementRef | undefined;\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.showAddForm && this.formElement) {\r\n      this.formElement.nativeElement.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }\r\n\r\n  editExperience(index: number) {\r\n    this.editIndex = index;\r\n    this.newExperience = { ...this.experiences[index] };\r\n    console.log(this.newExperience, 'edit', index);\r\n    this.showAddForm = true;\r\n    this.addEditButtonText = 'Edit Experience';\r\n\r\n    if (this.formElement) {\r\n      const navbarHeight = 130;\r\n      const scrollPosition =\r\n        this.formElement.nativeElement.offsetTop - navbarHeight;\r\n      window.scrollTo({ top: scrollPosition, behavior: 'smooth' });\r\n    }\r\n  }\r\n\r\n  deleteExperience(index: number) {\r\n    const experienceId = this.experiences[index]._id;\r\n\r\n    this.experienceService.deleteExperience(experienceId).subscribe({\r\n      next: () => {\r\n        this.fetchExperiences(); // Fetch updated experiences after deleting\r\n        console.log('Experience deleted successfully');\r\n      },\r\n      error: (error) => {\r\n        console.error('Error deleting experience:', error);\r\n      },\r\n    });\r\n  }\r\n\r\n  private fetchExperiences() {\r\n    this.experienceService.getExperiences().subscribe({\r\n      next: (data) => {\r\n        this.experiences = data;\r\n        console.log('Experiences fetched successfully');\r\n        this.loading = false;\r\n        console.log(data);\r\n      },\r\n      error: (error) => {\r\n        console.error('Error fetching experiences:', error);\r\n      },\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".modify {\r\n  display: flex;\r\n}\r\n.modify button {\r\n  font-size: 8px;\r\n  background-color: rgb(23, 170, 190);\r\n}\r\n",
                    "styleUrl": "./experience.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "experienceService",
                        "type": "ExperienceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "experienceService",
                        "type": "ExperienceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<!-- \r\n      - #EXPERIENCE\r\n    -->\r\n\r\n<section class=\"section experience\" aria-labelledby=\"experience-label\">\r\n  <div class=\"container\">\r\n    <h2 class=\"section-title headline-md\" id=\"experience-label\">Experience</h2>\r\n    <button\r\n      class=\"btn btn-primary\"\r\n      (click)=\"toggleAddForm()\"\r\n      *ngIf=\"authService.isLoggedIn\"\r\n    >\r\n      {{ addEditButtonText }}\r\n    </button>\r\n    <br />\r\n    <div *ngIf=\"showAddForm\" #experienceForm>\r\n      <!-- Form for adding a new experience -->\r\n      <form\r\n        (ngSubmit)=\"addExperience()\"\r\n        #experienceForm=\"ngForm\"\r\n        ngNativeValidate\r\n      >\r\n        <label for=\"title\">Title:</label>\r\n        <input\r\n          class=\"input-field\"\r\n          type=\"text\"\r\n          id=\"title\"\r\n          name=\"title\"\r\n          [(ngModel)]=\"newExperience.title\"\r\n          required\r\n          maxlength=\"20\"\r\n          placeholder=\"Title (Max Length 20 characters) *\"\r\n        />\r\n\r\n        <label for=\"startDate\">Start Date:</label>\r\n        <input\r\n          class=\"input-field\"\r\n          type=\"text\"\r\n          id=\"startDate\"\r\n          name=\"startDate\"\r\n          maxlength=\"15\"\r\n          placeholder=\"Start Date(Max Length 15 characters) *\"\r\n          [(ngModel)]=\"newExperience.startDate\"\r\n          required\r\n        />\r\n\r\n        <label for=\"endDate\">End Date:</label>\r\n        <input\r\n          class=\"input-field\"\r\n          type=\"text\"\r\n          id=\"endDate\"\r\n          name=\"endDate\"\r\n          maxlength=\"15\"\r\n          placeholder=\"End Date (Max Length 15 characters) *\"\r\n          [(ngModel)]=\"newExperience.endDate\"\r\n          required\r\n        />\r\n\r\n        <label for=\"skills\">Skills:</label>\r\n        <input\r\n          class=\"input-field\"\r\n          type=\"text\"\r\n          id=\"skills\"\r\n          name=\"skills\"\r\n          maxlength=\"40\"\r\n          placeholder=\"Skills (Separate by ','. Max Length 40 characters) *\"\r\n          [(ngModel)]=\"newExperience.skills\"\r\n          required\r\n        />\r\n\r\n        <label for=\"description\">Description:</label>\r\n        <textarea\r\n          class=\"input-field\"\r\n          id=\"description\"\r\n          name=\"description\"\r\n          maxlength=\"250\"\r\n          placeholder=\"Description (Max Length 250 characters) *\"\r\n          [(ngModel)]=\"newExperience.description\"\r\n          required\r\n        ></textarea>\r\n\r\n        <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n      </form>\r\n    </div>\r\n    <br />\r\n    <ul class=\"protfolio-list\" *ngIf=\"loading\">\r\n      <ion-progress-bar type=\"indeterminate\"></ion-progress-bar>\r\n    </ul>\r\n    <ul class=\"experience-list\" *ngIf=\"!loading\">\r\n      <li\r\n        *ngFor=\"let experience of experiences; let i = index\"\r\n        class=\"experience-item\"\r\n      >\r\n        <h3 class=\"title-md\">{{ experience.title }}</h3>\r\n        <p class=\"body-sm\">\r\n          Duration: {{ experience.startDate }} - {{ experience.endDate }}\r\n        </p>\r\n        <p class=\"body-sm\">Skills: {{ experience.skills }}</p>\r\n        <p class=\"body-md\">{{ experience.description }}</p>\r\n        <div class=\"modify\" *ngIf=\"authService.isLoggedIn\">\r\n          <button class=\"btn btn-primary\" (click)=\"editExperience(i)\">\r\n            Edit\r\n          </button>\r\n          <br />\r\n          <button class=\"btn btn-primary\" (click)=\"deleteExperience(i)\">\r\n            Delete\r\n          </button>\r\n        </div>\r\n        <br />\r\n        <hr />\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</section>\r\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-88694bcbfb27fde93437caa70e2ac8939521b54f0f1df5068b4f3c41c51366060d67619050093d36b5a0d17f605f2f6270d9aa9a181fd7572414d43647d86588",
            "file": "src/app/components/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.css']\r\n})\r\nexport class FooterComponent {\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./footer.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- \r\n    - #FOOTER\r\n  -->\r\n\r\n<footer class=\"footer\">\r\n  <div class=\"container\">\r\n    <ul class=\"social-list\">\r\n      <li>\r\n        <a\r\n          href=\"https://facebook.com/facebook\"\r\n          target=\"_blank\"\r\n          class=\"social-link\"\r\n        >\r\n          <ion-icon name=\"logo-facebook\"></ion-icon>\r\n        </a>\r\n      </li>\r\n\r\n      <li>\r\n        <a\r\n          href=\"https://twitter.com/p__abhay\"\r\n          target=\"_blank\"\r\n          class=\"social-link\"\r\n        >\r\n          <ion-icon name=\"logo-twitter\"></ion-icon>\r\n        </a>\r\n      </li>\r\n\r\n      <li>\r\n        <a\r\n          href=\"https://instagram.com/p__abhay\"\r\n          target=\"_blank\"\r\n          class=\"social-link\"\r\n        >\r\n          <ion-icon name=\"logo-instagram\"></ion-icon>\r\n        </a>\r\n      </li>\r\n\r\n      <li>\r\n        <a\r\n          href=\"https://linkedin.com/in/abhay-sankhwar02\"\r\n          target=\"_blank\"\r\n          class=\"social-link\"\r\n        >\r\n          <ion-icon name=\"logo-linkedin\"></ion-icon>\r\n        </a>\r\n      </li>\r\n\r\n      <li>\r\n        <a\r\n          href=\"https://github.com/p-abhay\"\r\n          target=\"_blank\"\r\n          class=\"social-link\"\r\n        >\r\n          <ion-icon name=\"logo-github\"></ion-icon>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n\r\n    <p class=\"text-center\">&copy; 2024 copyright all right reserved</p>\r\n  </div>\r\n</footer>\r\n"
        },
        {
            "name": "ForgotPasswordComponent",
            "id": "component-ForgotPasswordComponent-901324d89f69ab672aa2e487fa8f760c3630c8f33548455490271cecb50acd59b87626cd1bf5f5005fb948a07b3641609df65bc66013acfff220669ab87530dd",
            "file": "src/app/components/forgot-password/forgot-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forgot-password",
            "styleUrls": [
                "./forgot-password.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "email",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "emailValue",
                    "defaultValue": "{\r\n    dirty: false,\r\n    errors: {\r\n      valid: false,\r\n    },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "title",
                    "defaultValue": "'Forgot Password'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEmailChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "passwordReset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.css'],\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n  title = 'Forgot Password';\r\n  email = '';\r\n  constructor(public authService: AuthService, private titleService: Title) {}\r\n  ngOnInit(): void {\r\n    this.titleService.setTitle(this.title);\r\n  }\r\n\r\n  emailValue = {\r\n    dirty: false,\r\n    errors: {\r\n      valid: false,\r\n    },\r\n  };\r\n  onEmailChange() {\r\n    this.emailValue.dirty = true;\r\n\r\n    this.emailValue.errors.valid =\r\n      !/^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})$/.test(this.email);\r\n  }\r\n\r\n  passwordReset() {\r\n    this.authService.forgotPassword(this.email);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".section {\r\n  height: 100vh;\r\n}\r\n\r\n.center {\r\n  /* margin: auto;\r\n    width: 50%;\r\n    padding: 10px; */\r\n  padding: 10px;\r\n  /* background: gray; */\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n.child {\r\n  /* background-color: orange; */\r\n  width: 75%;\r\n}\r\n.formGroup {\r\n  width: 50%;\r\n  margin-left: 25%;\r\n}\r\n.sub-control {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  /* background-color: blueviolet; */\r\n}\r\n.other-links {\r\n  display: flex;\r\n  margin-top: 10px;\r\n  gap: 5px;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  /* background-color: rgb(144, 133, 154); */\r\n}\r\n.other-links > a {\r\n  color: blueviolet;\r\n  font-weight: bold;\r\n  display: inline-block;\r\n}\r\n",
                    "styleUrl": "./forgot-password.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"section\">\r\n  <form #form=\"ngForm\" (ngSubmit)=\"passwordReset()\" ngNativeValidate>\r\n    <div class=\"container center\">\r\n      <div class=\"child\">\r\n        <h2 class=\"headline-sm text-center\">Reset Password</h2>\r\n\r\n        <div class=\"formGroup\">\r\n          <label for=\"email\" class=\"label\">Email Address:</label>\r\n          <input\r\n            type=\"email\"\r\n            class=\"input-field\"\r\n            placeholder=\"Email Address\"\r\n            name=\"email\"\r\n            id=\"email\"\r\n            [(ngModel)]=\"email\"\r\n            (ngModelChange)=\"onEmailChange()\"\r\n            required\r\n          />\r\n          <div\r\n            *ngIf=\"email && emailValue.dirty && emailValue.errors.valid\"\r\n            style=\"color: red\"\r\n          >\r\n            Enter correct Email Id.\r\n          </div>\r\n        </div>\r\n        <!-- Reset Button and Login backlink -->\r\n        <div class=\"sub-control\">\r\n          <div>\r\n            <button type=\"submit\" class=\"btn btnPrimary\">Reset Password</button>\r\n          </div>\r\n\r\n          <div class=\"other-links\">\r\n            <span>Go back to </span\r\n            ><a class=\"redirect\" routerLink=\"/login\">Log In</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</section>\r\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-99bf51ecb9c64417d650c7194481f0e3ac7a564dba0f2be816d725fdad4f32d146ad65e7a60ed7cb5f1a7e68cf643392a863c2e8a78ef2edb1eec4d8aaace3f9",
            "file": "src/app/components/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Personal Portfolio'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css'],\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  title = 'Personal Portfolio';\r\n  constructor(private titleService: Title) {}\r\n  ngOnInit(): void {\r\n    this.titleService.setTitle(this.title);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- \r\n      - #HERO\r\n    -->\r\n\r\n<section class=\"section hero\" aria-label=\"home\">\r\n  <div class=\"container\">\r\n    <div class=\"hero-content\">\r\n      <p class=\"hero-subtitle\">My name is Abhay</p>\r\n\r\n      <h1 class=\"headline-lg\">I'm a Developer</h1>\r\n\r\n      <p class=\"hero-text body-md\">Based in Kanpur, Uttar Pradesh.</p>\r\n\r\n      <a href=\"/contact\" class=\"btn btn-primary\">Let's Start</a>\r\n    </div>\r\n\r\n    <figure class=\"hero-banner\">\r\n      <img\r\n        src=\"assets/images/admin.jpg\"\r\n        width=\"680\"\r\n        height=\"645\"\r\n        alt=\"Admin Pic\"\r\n        class=\"w-100\"\r\n      />\r\n    </figure>\r\n  </div>\r\n</section>\r\n\r\n<!-- <app-about></app-about> -->\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-ed34fabac10c38c0fcabd1aa1262d04ccf5f6f8e2dc8c4f67af668a2e337a1a003b51eac528e5081e0b2bc3f78bb987189f7f8b89d1dff86536826618af498d3",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "email",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "emailValue",
                    "defaultValue": "{\r\n    dirty: false,\r\n    errors: {\r\n      valid: false,\r\n    },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "passwordValue",
                    "defaultValue": "{\r\n    dirty: false,\r\n    errors: {\r\n      minlength: false,\r\n    },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "title",
                    "defaultValue": "'Login'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEmailChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPasswordChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  title = 'Login';\r\n  constructor(public authService: AuthService, private titleService: Title) {}\r\n  ngOnInit(): void {\r\n    this.titleService.setTitle(this.title);\r\n  }\r\n\r\n  email: string = '';\r\n  password: string = '';\r\n\r\n  passwordValue = {\r\n    dirty: false,\r\n    errors: {\r\n      minlength: false,\r\n    },\r\n  };\r\n  emailValue = {\r\n    dirty: false,\r\n    errors: {\r\n      valid: false,\r\n    },\r\n  };\r\n\r\n  onPasswordChange() {\r\n    this.passwordValue.dirty = true;\r\n    this.passwordValue.errors.minlength = this.password.length < 8;\r\n  }\r\n  onEmailChange() {\r\n    this.emailValue.dirty = true;\r\n\r\n    this.emailValue.errors.valid =\r\n      !/^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})$/.test(this.email);\r\n  }\r\n  login() {\r\n    this.authService.login(this.email, this.password);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".section {\r\n  height: 100vh;\r\n}\r\n\r\n.center {\r\n  /* margin: auto;\r\n  width: 50%;\r\n  padding: 10px; */\r\n  padding: 10px;\r\n  /* background: gray; */\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n.child {\r\n  /* background-color: orange; */\r\n  width: 75%;\r\n}\r\n.formGroup {\r\n  width: 50%;\r\n  margin-left: 25%;\r\n}\r\n.sub-control {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  /* background-color: blueviolet; */\r\n}\r\n.other-links {\r\n  display: flex;\r\n  margin-top: 10px;\r\n  gap: 5px;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  /* background-color: rgb(144, 133, 154); */\r\n}\r\n.other-links > a {\r\n  color: blueviolet;\r\n  font-weight: bold;\r\n}\r\n",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"section\" aria-labelledby=\"login-label\">\r\n  <form #form=\"ngForm\" (ngSubmit)=\"login()\" ngNativeValidate>\r\n    <div class=\"container center\">\r\n      <div class=\"child\">\r\n        <h2 class=\"headline-sm text-center\">Login</h2>\r\n\r\n        <div class=\"formGroup\">\r\n          <label for=\"email\" class=\"label\">Email Address</label>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            id=\"email\"\r\n            placeholder=\"Email Address *\"\r\n            class=\"input-field\"\r\n            required\r\n            [(ngModel)]=\"email\"\r\n            (ngModelChange)=\"onEmailChange()\"\r\n          />\r\n          <div\r\n            *ngIf=\"email && emailValue.dirty && emailValue.errors.valid\"\r\n            style=\"color: red\"\r\n          >\r\n            Enter correct Email Id.\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"formGroup\">\r\n          <label for=\"password\" class=\"label\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            id=\"password\"\r\n            placeholder=\"Password *\"\r\n            class=\"input-field\"\r\n            required\r\n            [(ngModel)]=\"password\"\r\n            minlength=\"8\"\r\n            (ngModelChange)=\"onPasswordChange()\"\r\n          />\r\n          <div\r\n            *ngIf=\"\r\n              password && passwordValue.dirty && passwordValue.errors?.minlength\r\n            \"\r\n            style=\"color: red\"\r\n          >\r\n            Password must be at least 8 characters long.\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"sub-control\">\r\n          <div>\r\n            <button type=\"submit\" class=\"btn btnPrimary\">Log in</button>\r\n          </div>\r\n          <div class=\"other-links\">\r\n            <span>Or</span>\r\n            <a routerLink=\"/forgot-password\">Forgot Password?</a>\r\n            <span> Don't have an account?</span>\r\n            <a class=\"redirect\" routerLink=\"/signup\">Sign Up</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</section>\r\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-ba5f6deb4059d8315966a1d84331d6f92a3d6aff9c36761849ac3bf1b75f1cf858e1d7cd1c92235182dd9a9122b47e10b0bdcec3553698bad350db112a4c782c",
            "file": "src/app/components/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [
                "./navbar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "headerClass",
                    "defaultValue": "'header'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "status",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "addToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onWindowScroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:scroll', undefined"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:scroll",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener } from '@angular/core';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css'],\r\n})\r\nexport class NavbarComponent {\r\n  headerClass: string = 'header';\r\n\r\n  @HostListener('window:scroll', [])\r\n  onWindowScroll() {\r\n    // Check the scroll position\r\n    const scrollPosition =\r\n      window.scrollY ||\r\n      document.documentElement.scrollTop ||\r\n      document.body.scrollTop ||\r\n      0;\r\n\r\n    // Update the class based on the scroll position\r\n    if (scrollPosition >= 50) {\r\n      this.headerClass = 'header active';\r\n    } else {\r\n      this.headerClass = 'header';\r\n    }\r\n  }\r\n  constructor(public authService: AuthService) {}\r\n  status = false;\r\n  addToggle() {\r\n    this.status = !this.status;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* .navbar-nav .nav-link {\r\n  font-size: 20px;\r\n} */\r\n",
                    "styleUrl": "./navbar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<!-- \r\n    - #HEADER\r\n  -->\r\n\r\n<header [class]=\"this.headerClass\" data-header>\r\n  <div class=\"container\">\r\n    <a routerLink=\"/home\" class=\"logo\">\r\n      <img\r\n        src=\"assets/images/logo2.png\"\r\n        width=\"151\"\r\n        height=\"28\"\r\n        alt=\"Jassa home\"\r\n      />\r\n    </a>\r\n\r\n    <nav class=\"navbar\" data-navbar [ngClass]=\"status ? 'active' : ''\">\r\n      <ul class=\"navbar-list\">\r\n        <li class=\"navbar-item\">\r\n          <a\r\n            routerLink=\"/home\"\r\n            class=\"label-lg navbar-link has-after\"\r\n            routerLinkActive=\"active\"\r\n            >Home</a\r\n          >\r\n        </li>\r\n        <li class=\"navbar-item\">\r\n          <a\r\n            routerLink=\"/about\"\r\n            class=\"label-lg navbar-link has-after\"\r\n            routerLinkActive=\"active\"\r\n            >About</a\r\n          >\r\n        </li>\r\n        <li class=\"navbar-item\">\r\n          <a\r\n            routerLink=\"/resume\"\r\n            class=\"label-lg navbar-link has-after\"\r\n            routerLinkActive=\"active\"\r\n            >Resume</a\r\n          >\r\n        </li>\r\n\r\n        <li class=\"navbar-item\">\r\n          <a\r\n            routerLink=\"/projects\"\r\n            class=\"label-lg navbar-link has-after\"\r\n            routerLinkActive=\"active\"\r\n            >Projects</a\r\n          >\r\n        </li>\r\n\r\n        <li class=\"navbar-item\">\r\n          <a\r\n            routerLink=\"/contact\"\r\n            class=\"label-lg navbar-link has-after\"\r\n            routerLinkActive=\"active\"\r\n            >Contact</a\r\n          >\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n\r\n    <a\r\n      routerLink=\"/signup\"\r\n      class=\"btn btn-primary\"\r\n      *ngIf=\"!authService.isLoggedIn\"\r\n      >SignUp</a\r\n    >\r\n    <a\r\n      routerLink=\"/login\"\r\n      class=\"btn btn-primary\"\r\n      *ngIf=\"!authService.isLoggedIn\"\r\n      >Login</a\r\n    >\r\n    <a\r\n      id=\"logoutButton\"\r\n      routerLink=\"/login\"\r\n      class=\"btn btn-primary\"\r\n      *ngIf=\"authService.isLoggedIn\"\r\n      (click)=\"authService.signOut()\"\r\n      >Logout</a\r\n    >\r\n\r\n    <button\r\n      class=\"nav-toggle-btn\"\r\n      aria-label=\"menu\"\r\n      data-nav-toggler\r\n      (click)=\"addToggle()\"\r\n    >\r\n      <ion-icon name=\"menu-outline\" aria-hidden=\"true\"></ion-icon>\r\n    </button>\r\n  </div>\r\n</header>\r\n"
        },
        {
            "name": "PageNotFoundComponent",
            "id": "component-PageNotFoundComponent-4026fd864db1040d14a06675a20a546ee6fda0dd9a3abab06a5699937ab9518b5b78e178f31516fdf399c224a3fd8bf6909094cb0a31e6c39010206d300f38ad",
            "file": "src/app/components/page-not-found/page-not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-not-found",
            "styleUrls": [
                "./page-not-found.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-not-found.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'404 - Page Not Found'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'app-page-not-found',\r\n  templateUrl: './page-not-found.component.html',\r\n  styleUrls: ['./page-not-found.component.css'],\r\n})\r\nexport class PageNotFoundComponent implements OnInit {\r\n  title = '404 - Page Not Found';\r\n  constructor(private titleService: Title) {}\r\n  ngOnInit(): void {\r\n    this.titleService.setTitle(this.title);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".error-message {\r\n  font-size: 36px;\r\n  font-weight: bold;\r\n  margin-bottom: 20px;\r\n}\r\n.back-link {\r\n  text-decoration: none;\r\n  color: #007bff;\r\n}\r\n.back-link:hover {\r\n  text-decoration: underline;\r\n}\r\n",
                    "styleUrl": "./page-not-found.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"section\">\r\n  <div\r\n    class=\"text-center container\"\r\n    style=\"padding-bottom: 230px; padding-top: 80px\"\r\n  >\r\n    <p class=\"error-message\">404 - Page Not Found</p>\r\n    <p>Sorry, the page you are looking for does not exist.</p>\r\n    <p>Return to <a href=\"/\" class=\"back-link\">Home</a></p>\r\n  </div>\r\n</section>\r\n"
        },
        {
            "name": "ProjectsComponent",
            "id": "component-ProjectsComponent-a36ee07fe55939dd032be5a767d72013c633df11d6e401add6324c45ee0135144536183650452f3e01a3be946dac95416a4b9232ef3f35fe038a9ad8220c67dd",
            "file": "src/app/components/projects/projects.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-projects",
            "styleUrls": [
                "./projects.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./projects.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addEditButtonText",
                    "defaultValue": "'Add Project'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "editIndex",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "formElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'portfolioForm'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "newProject",
                    "defaultValue": "{\r\n    _id: '',\r\n    image: '',\r\n    title: '',\r\n    category: '',\r\n    description: '',\r\n    link: '',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "projects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "showAddForm",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "addProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteProject",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editProject",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleImageUpload",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleAddForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { Project } from 'src/app/shared/models/project.model';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\nimport { ProjectService } from 'src/app/shared/services/project.service';\r\n\r\n@Component({\r\n  selector: 'app-projects',\r\n  templateUrl: './projects.component.html',\r\n  styleUrls: ['./projects.component.css'],\r\n})\r\nexport class ProjectsComponent implements OnInit, AfterViewInit {\r\n  constructor(\r\n    public authService: AuthService,\r\n    private projectService: ProjectService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.fetchProjects(); // Call getProjects during component initialization\r\n  }\r\n\r\n  projects: Project[] = [];\r\n  loading = true;\r\n  showAddForm = false;\r\n  newProject: Project = {\r\n    _id: '',\r\n    image: '',\r\n    title: '',\r\n    category: '',\r\n    description: '',\r\n    link: '',\r\n  };\r\n\r\n  editIndex: number | null = null;\r\n\r\n  toggleAddForm() {\r\n    this.showAddForm = !this.showAddForm;\r\n    this.editIndex = null;\r\n  }\r\n\r\n  handleImageUpload(event: any) {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        this.newProject.image = reader.result as string;\r\n      };\r\n      reader.readAsDataURL(file);\r\n      console.log(this.newProject.image.length);\r\n    }\r\n  }\r\n\r\n  addProject() {\r\n    if (this.editIndex !== null) {\r\n      this.projectService\r\n        .updateProject(this.projects[this.editIndex]._id, this.newProject)\r\n        .subscribe({\r\n          next: () => {\r\n            this.fetchProjects(); // Fetch updated projects after updating\r\n            console.log('Project updated successfully');\r\n          },\r\n          error: (error) => {\r\n            console.error('Error updating project:', error);\r\n          },\r\n        });\r\n    } else {\r\n      this.projectService.addProject(this.newProject).subscribe({\r\n        next: () => {\r\n          this.fetchProjects(); // Fetch updated projects after adding\r\n          console.log('Project added successfully');\r\n        },\r\n        error: (error) => {\r\n          console.error('Error adding project:', error);\r\n        },\r\n      });\r\n    }\r\n\r\n    this.showAddForm = false;\r\n    this.editIndex = null;\r\n    this.newProject = {\r\n      _id: '',\r\n      image: '',\r\n      title: '',\r\n      category: '',\r\n      description: '',\r\n      link: '',\r\n    };\r\n    this.addEditButtonText = 'Add Project';\r\n  }\r\n\r\n  addEditButtonText = 'Add Project';\r\n  @ViewChild('portfolioForm') formElement: ElementRef | undefined;\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.showAddForm && this.formElement) {\r\n      this.formElement.nativeElement.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }\r\n\r\n  editProject(index: number) {\r\n    this.editIndex = index;\r\n    this.newProject = { ...this.projects[index] };\r\n    console.log(this.newProject, 'edit', index);\r\n    this.showAddForm = true;\r\n    this.addEditButtonText = 'Edit Project';\r\n\r\n    if (this.formElement) {\r\n      const navbarHeight = 130;\r\n      const scrollPosition =\r\n        this.formElement.nativeElement.offsetTop - navbarHeight;\r\n      window.scrollTo({ top: scrollPosition, behavior: 'smooth' });\r\n    }\r\n  }\r\n\r\n  deleteProject(index: number) {\r\n    const projectId = this.projects[index]._id;\r\n\r\n    this.projectService.deleteProject(projectId).subscribe({\r\n      next: () => {\r\n        this.fetchProjects(); // Fetch updated projects after deleting\r\n        console.log('Project deleted successfully');\r\n      },\r\n      error: (error) => {\r\n        console.error('Error deleting project:', error);\r\n      },\r\n    });\r\n  }\r\n\r\n  private fetchProjects() {\r\n    this.projectService.getProjects().subscribe({\r\n      next: (data) => {\r\n        this.projects = data;\r\n        console.log('Projects fetched successfully');\r\n        this.loading = false;\r\n        console.log(data);\r\n      },\r\n      error: (error) => {\r\n        console.error('Error fetching projects:', error);\r\n      },\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".button-group {\r\n  display: flex;\r\n}\r\n.button {\r\n  flex: 0.3;\r\n}\r\n.button button {\r\n  font-size: 8px;\r\n}\r\n",
                    "styleUrl": "./projects.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<main>\r\n  <article>\r\n    <section class=\"section portfolio\" aria-labelledby=\"portfolio-label\">\r\n      <div class=\"container\">\r\n        <button\r\n          class=\"btn btn-primary\"\r\n          (click)=\"toggleAddForm()\"\r\n          *ngIf=\"authService.isLoggedIn\"\r\n        >\r\n          {{ addEditButtonText }}\r\n        </button>\r\n        <br />\r\n\r\n        <div *ngIf=\"showAddForm\" #portfolioForm>\r\n          <!-- Form for adding a new project with image upload -->\r\n          <form\r\n            (ngSubmit)=\"addProject()\"\r\n            #experienceForm=\"ngForm\"\r\n            ngNativeValidate\r\n          >\r\n            <div class=\"form-group\">\r\n              <label for=\"newImage\">Upload Image</label>\r\n              <input\r\n                class=\"input-field\"\r\n                type=\"file\"\r\n                id=\"newImage\"\r\n                name=\"newImage\"\r\n                required\r\n                placeholder=\"Image of the Project *\"\r\n                (change)=\"handleImageUpload($event)\"\r\n              />\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n              <label for=\"newTitle\">Title</label>\r\n              <input\r\n                class=\"input-field\"\r\n                type=\"text\"\r\n                name=\"newTitle\"\r\n                id=\"newTitle\"\r\n                [(ngModel)]=\"newProject.title\"\r\n                maxlength=\"20\"\r\n                placeholder=\"Title (Max Length 20 characters) *\"\r\n                required\r\n              />\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n              <label for=\"newCategory\">Category</label>\r\n              <input\r\n                class=\"input-field\"\r\n                type=\"text\"\r\n                name=\"newCategory\"\r\n                id=\"newCategory\"\r\n                maxlength=\"10\"\r\n                required\r\n                placeholder=\"Category (Max Length 10 characters) *\"\r\n                [(ngModel)]=\"newProject.category\"\r\n              />\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n              <label for=\"newDescription\">Description</label>\r\n              <textarea\r\n                class=\"input-field\"\r\n                id=\"newDescription\"\r\n                name=\"newDescription\"\r\n                maxlength=\"250\"\r\n                required\r\n                placeholder=\"Description (Max Length 250 characters) *\"\r\n                [(ngModel)]=\"newProject.description\"\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n              <label for=\"newLink\">Link</label>\r\n              <input\r\n                class=\"input-field\"\r\n                type=\"text\"\r\n                name=\"newLink\"\r\n                id=\"newLink\"\r\n                placeholder=\"Link to Repository or deployment (Optional)\"\r\n                [(ngModel)]=\"newProject.link\"\r\n              />\r\n            </div>\r\n\r\n            <!-- Submit button -->\r\n            <button class=\"btn btn-primary\">Submit</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <div class=\"container\">\r\n        <h2 class=\"section-title headline-md text-center\" id=\"portfolio-label\">\r\n          Latest Projects\r\n        </h2>\r\n        <ul class=\"protfolio-list\" *ngIf=\"loading\">\r\n          <ion-progress-bar type=\"indeterminate\"></ion-progress-bar>\r\n        </ul>\r\n        <ul class=\"portfolio-list\" *ngIf=\"!loading\">\r\n          <li *ngFor=\"let project of projects; let i = index\">\r\n            <div class=\"portfolio-card\">\r\n              <div\r\n                class=\"card-banner img-holder\"\r\n                [style.width.px]=\"800\"\r\n                [style.height.px]=\"540\"\r\n              >\r\n                <img\r\n                  src=\"{{ project.image }}\"\r\n                  width=\"800\"\r\n                  height=\"540\"\r\n                  loading=\"lazy\"\r\n                  [alt]=\"project.title\"\r\n                  class=\"img-cover\"\r\n                />\r\n                <a\r\n                  href=\"{{ project.link }}\"\r\n                  class=\"btn-icon\"\r\n                  aria-label=\"More about {{ project.title }}\"\r\n                >\r\n                  <ion-icon\r\n                    name=\"arrow-forward-sharp\"\r\n                    aria-hidden=\"true\"\r\n                  ></ion-icon>\r\n                </a>\r\n              </div>\r\n\r\n              <div class=\"card-content\">\r\n                <span class=\"chip label-md\">{{ project.category }}</span>\r\n                <h3 class=\"title-md\">{{ project.title }}</h3>\r\n                <p class=\"card-text\">{{ project.description }}</p>\r\n\r\n                <a\r\n                  href=\"{{ project.link }}\"\r\n                  target=\"_blank\"\r\n                  class=\"btn btn-primary\"\r\n                  >View Project</a\r\n                >\r\n                <!-- Edit and delete buttons -->\r\n                <br />\r\n                <div class=\"button-group\" *ngIf=\"authService.isLoggedIn\">\r\n                  <div class=\"button\">\r\n                    <button class=\"btn btn-secondary\" (click)=\"editProject(i)\">\r\n                      Edit\r\n                    </button>\r\n                  </div>\r\n\r\n                  <div class=\"button\">\r\n                    <button class=\"btn btn-danger\" (click)=\"deleteProject(i)\">\r\n                      Delete\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </section>\r\n  </article>\r\n</main>\r\n\r\n<!-- <main>\r\n  <article>\r\n   \r\n    <section class=\"section portfolio\" aria-labelledby=\"portfolio-label\">\r\n      <div class=\"container\">\r\n        <h2 class=\"section-title headline-md text-center\" id=\"portfolio-label\">\r\n          Latest Projects\r\n        </h2>\r\n\r\n        <ul class=\"portfolio-list\">\r\n          <li>\r\n            <div class=\"portfolio-card\">\r\n              <div\r\n                class=\"card-banner img-holder\"\r\n                style=\"--width: 800; --height: 540\"\r\n              >\r\n                <img\r\n                  src=\"./assets/images/portfolio-1.jpg\"\r\n                  width=\"800\"\r\n                  height=\"540\"\r\n                  loading=\"lazy\"\r\n                  alt=\"Website Design for Marketing Agency Startup\"\r\n                  class=\"img-cover\"\r\n                />\r\n\r\n                <a\r\n                  href=\"#\"\r\n                  class=\"btn-icon\"\r\n                  aria-label=\"More about Website Design for Marketing Agency Startup\"\r\n                >\r\n                  <ion-icon\r\n                    name=\"arrow-forward-sharp\"\r\n                    aria-hidden=\"true\"\r\n                  ></ion-icon>\r\n                </a>\r\n              </div>\r\n\r\n              <div class=\"card-content\">\r\n                <span class=\"chip label-md\">Web Design</span>\r\n\r\n                <h3 class=\"title-md\">\r\n                  Website Design for Marketing Agency Startup\r\n                </h3>\r\n\r\n                <p class=\"card-text\">\r\n                  I design and develop services for customers of all sizes,\r\n                  specializing in creating stylish, modern websites, web\r\n                  services and online stores\r\n                </p>\r\n\r\n                <a href=\"#\" class=\"btn btn-primary\">View Project</a>\r\n              </div>\r\n            </div>\r\n          </li>\r\n\r\n          <li>\r\n            <div class=\"portfolio-card\">\r\n              <div\r\n                class=\"card-banner img-holder\"\r\n                style=\"--width: 800; --height: 540\"\r\n              >\r\n                <img\r\n                  src=\"./assets/images/portfolio-2.jpg\"\r\n                  width=\"800\"\r\n                  height=\"540\"\r\n                  loading=\"lazy\"\r\n                  alt=\"Website Design for Marketing Agency Startup\"\r\n                  class=\"img-cover\"\r\n                />\r\n\r\n                <a\r\n                  href=\"#\"\r\n                  class=\"btn-icon\"\r\n                  aria-label=\"More about Website Design for Marketing Agency Startup\"\r\n                >\r\n                  <ion-icon\r\n                    name=\"arrow-forward-sharp\"\r\n                    aria-hidden=\"true\"\r\n                  ></ion-icon>\r\n                </a>\r\n              </div>\r\n\r\n              <div class=\"card-content\">\r\n                <span class=\"chip label-md\">Web Design</span>\r\n\r\n                <h3 class=\"title-md\">\r\n                  Website Design for Marketing Agency Startup\r\n                </h3>\r\n\r\n                <p class=\"card-text\">\r\n                  I design and develop services for customers of all sizes,\r\n                  specializing in creating stylish, modern websites, web\r\n                  services and online stores\r\n                </p>\r\n\r\n                <a href=\"#\" class=\"btn btn-primary\">View Project</a>\r\n              </div>\r\n            </div>\r\n          </li>\r\n\r\n          <li>\r\n            <div class=\"portfolio-card\">\r\n              <div\r\n                class=\"card-banner img-holder\"\r\n                style=\"--width: 800; --height: 540\"\r\n              >\r\n                <img\r\n                  src=\"./assets/images/portfolio-3.jpg\"\r\n                  width=\"800\"\r\n                  height=\"540\"\r\n                  loading=\"lazy\"\r\n                  alt=\"Website Design for Marketing Agency Startup\"\r\n                  class=\"img-cover\"\r\n                />\r\n\r\n                <a\r\n                  href=\"#\"\r\n                  class=\"btn-icon\"\r\n                  aria-label=\"More about Website Design for Marketing Agency Startup\"\r\n                >\r\n                  <ion-icon\r\n                    name=\"arrow-forward-sharp\"\r\n                    aria-hidden=\"true\"\r\n                  ></ion-icon>\r\n                </a>\r\n              </div>\r\n\r\n              <div class=\"card-content\">\r\n                <span class=\"chip label-md\">Web Design</span>\r\n\r\n                <h3 class=\"title-md\">\r\n                  Website Design for Marketing Agency Startup\r\n                </h3>\r\n\r\n                <p class=\"card-text\">\r\n                  I design and develop services for customers of all sizes,\r\n                  specializing in creating stylish, modern websites, web\r\n                  services and online stores\r\n                </p>\r\n\r\n                <a href=\"#\" class=\"btn btn-primary\">View Project</a>\r\n              </div>\r\n            </div>\r\n          </li>\r\n\r\n          <li>\r\n            <div class=\"portfolio-card\">\r\n              <div\r\n                class=\"card-banner img-holder\"\r\n                style=\"--width: 800; --height: 540\"\r\n              >\r\n                <img\r\n                  src=\"./assets/images/portfolio-4.jpg\"\r\n                  width=\"800\"\r\n                  height=\"540\"\r\n                  loading=\"lazy\"\r\n                  alt=\"Website Design for Marketing Agency Startup\"\r\n                  class=\"img-cover\"\r\n                />\r\n\r\n                <a\r\n                  href=\"#\"\r\n                  class=\"btn-icon\"\r\n                  aria-label=\"More about Website Design for Marketing Agency Startup\"\r\n                >\r\n                  <ion-icon\r\n                    name=\"arrow-forward-sharp\"\r\n                    aria-hidden=\"true\"\r\n                  ></ion-icon>\r\n                </a>\r\n              </div>\r\n\r\n              <div class=\"card-content\">\r\n                <span class=\"chip label-md\">Web Design</span>\r\n\r\n                <h3 class=\"title-md\">\r\n                  Website Design for Marketing Agency Startup\r\n                </h3>\r\n\r\n                <p class=\"card-text\">\r\n                  I design and develop services for customers of all sizes,\r\n                  specializing in creating stylish, modern websites, web\r\n                  services and online stores\r\n                </p>\r\n\r\n                <a href=\"#\" class=\"btn btn-primary\">View Project</a>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </section>\r\n  </article>\r\n</main> -->\r\n"
        },
        {
            "name": "ResumeComponent",
            "id": "component-ResumeComponent-3f669c8c2f99e45786c8042f0e19db166882b61ce82452acc903e4fc1ba34a3469176f11cb4323505ac873fae1fc0ab1c9542dddb34d860e171e3df00c8d1871",
            "file": "src/app/components/resume/resume.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-resume",
            "styleUrls": [
                "./resume.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./resume.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "defaultValue": "'Resume - Download'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "downloadPDF",
                    "args": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'app-resume',\r\n  templateUrl: './resume.component.html',\r\n  styleUrls: ['./resume.component.css'],\r\n})\r\nexport class ResumeComponent implements OnInit {\r\n  title = 'Resume - Download';\r\n  constructor(private titleService: Title) {}\r\n  ngOnInit(): void {\r\n    this.titleService.setTitle(this.title);\r\n  }\r\n\r\n  showError = false;\r\n  errorMessage = '';\r\n\r\n  // Function to handle iframe error\r\n  handleError() {\r\n    this.showError = true;\r\n    this.errorMessage =\r\n      'Failed to load the resource. The server responded with a rate limit exceeded error.Download the file instead';\r\n  }\r\n  downloadPDF(fileId: string): void {\r\n    const downloadLink = document.createElement('a');\r\n    downloadLink.href = `https://drive.google.com/uc?export=download&id=${fileId}`;\r\n    downloadLink.target = '_blank';\r\n    downloadLink.download = 'your_file_name.pdf'; // Set a preferred file name\r\n\r\n    // Triggering the download\r\n    downloadLink.click();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".section {\r\n  height: 100vh;\r\n}\r\n",
                    "styleUrl": "./resume.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"section login has-bg-image\" aria-labelledby=\"login-label\">\r\n  <div class=\"container\">\r\n    <!-- Add an ngIf directive to conditionally render the iframe or error message -->\r\n    <div *ngIf=\"!showError; else errorBlock\" class=\"authBlock\">\r\n      <!-- Add (load) event to handle successful iframe load -->\r\n      <iframe\r\n        src=\"https://drive.google.com/file/d/1XmZUZYvrYLyC4hquo2z_PIAC8Fx922hG/preview\"\r\n        width=\"100%\"\r\n        height=\"600\"\r\n        frameborder=\"0\"\r\n        allowfullscreen=\"true\"\r\n        mozallowfullscreen=\"true\"\r\n        webkitallowfullscreen=\"true\"\r\n        (load)=\"handleError()\"\r\n      ></iframe>\r\n    </div>\r\n    <!-- Add a download button -->\r\n    <div class=\"formGroup\">\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn btnPrimary\"\r\n        (click)=\"downloadPDF('1XmZUZYvrYLyC4hquo2z_PIAC8Fx922hG')\"\r\n      >\r\n        Download\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Add an error block to display the error message -->\r\n    <ng-template #errorBlock>\r\n      <div class=\"error-message\">\r\n        {{ errorMessage }}\r\n      </div>\r\n    </ng-template>\r\n  </div>\r\n</section>\r\n"
        },
        {
            "name": "SignupComponent",
            "id": "component-SignupComponent-b4c9d53a9f54447edbe0597efb4b111c00816425b1ee8c962497c06a0172d11c74a9eea32870b2d89d5021aee297e961c646c67d255d4ab2200249c12e62eb50",
            "file": "src/app/components/signup/signup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signup",
            "styleUrls": [
                "./signup.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./signup.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "confirmPassword",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "confirmPasswordValue",
                    "defaultValue": "{\r\n    dirty: false,\r\n    errors: {\r\n      minlength: false,\r\n      equal: false,\r\n    },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "email",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "emailValue",
                    "defaultValue": "{\r\n    dirty: false,\r\n    errors: {\r\n      valid: false,\r\n    },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "passwordValue",
                    "defaultValue": "{\r\n    dirty: false,\r\n    errors: {\r\n      minlength: false,\r\n    },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "title",
                    "defaultValue": "'SignUp'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onConfirmPasswordChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEmailChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPasswordChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.css'],\r\n})\r\nexport class SignupComponent implements OnInit {\r\n  title = 'SignUp';\r\n  constructor(public authService: AuthService, private titleService: Title) {}\r\n  ngOnInit() {\r\n    this.titleService.setTitle(this.title);\r\n  }\r\n  email: string = '';\r\n  password: string = '';\r\n  confirmPassword: string = '';\r\n  confirmPasswordValue = {\r\n    dirty: false,\r\n    errors: {\r\n      minlength: false,\r\n      equal: false,\r\n    },\r\n  };\r\n  passwordValue = {\r\n    dirty: false,\r\n    errors: {\r\n      minlength: false,\r\n    },\r\n  };\r\n  emailValue = {\r\n    dirty: false,\r\n    errors: {\r\n      valid: false,\r\n    },\r\n  };\r\n\r\n  onConfirmPasswordChange() {\r\n    this.confirmPasswordValue.dirty = true;\r\n    this.confirmPasswordValue.errors.minlength = this.password.length < 8;\r\n    this.confirmPasswordValue.errors.equal =\r\n      this.password === this.confirmPassword;\r\n  }\r\n  onPasswordChange() {\r\n    this.passwordValue.dirty = true;\r\n    this.passwordValue.errors.minlength = this.password.length < 8;\r\n  }\r\n  onEmailChange() {\r\n    this.emailValue.dirty = true;\r\n\r\n    this.emailValue.errors.valid =\r\n      !/^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})$/.test(this.email);\r\n  }\r\n  signUp() {\r\n    if (this.password === this.confirmPassword)\r\n      this.authService.signUp(this.email, this.password);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".section {\r\n  height: 100vh;\r\n}\r\n\r\n.center {\r\n  /* margin: auto;\r\n    width: 50%;\r\n    padding: 10px; */\r\n  padding: 10px;\r\n  /* background: gray; */\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n.child {\r\n  /* background-color: orange; */\r\n  width: 75%;\r\n}\r\n.formGroup {\r\n  width: 50%;\r\n  margin-left: 25%;\r\n}\r\n\r\n.sub-control {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  /* background-color: blueviolet; */\r\n}\r\n.other-links {\r\n  display: flex;\r\n  margin-top: 10px;\r\n  gap: 5px;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  /* background-color: rgb(144, 133, 154); */\r\n}\r\n.other-links > a {\r\n  color: blueviolet;\r\n  font-weight: bold;\r\n}\r\n",
                    "styleUrl": "./signup.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"section\" aria-labelledby=\"signup-label\">\r\n  <form #form=\"ngForm\" (ngSubmit)=\"signUp()\" ngNativeValidate>\r\n    <div class=\"container center\">\r\n      <div class=\"child\">\r\n        <h2 class=\"headline-sm text-center\">Sign Up</h2>\r\n\r\n        <div class=\"formGroup\">\r\n          <label for=\"email\" class=\"label\">Email Address</label>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            id=\"email\"\r\n            placeholder=\"Email Address *\"\r\n            class=\"input-field\"\r\n            required\r\n            [(ngModel)]=\"email\"\r\n            (ngModelChange)=\"onEmailChange()\"\r\n          />\r\n          <div\r\n            *ngIf=\"email && emailValue.dirty && emailValue.errors.valid\"\r\n            style=\"color: red\"\r\n          >\r\n            Enter correct Email Id.\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"formGroup\">\r\n          <label for=\"password\" class=\"label\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            id=\"password\"\r\n            placeholder=\"Password *\"\r\n            class=\"input-field\"\r\n            required\r\n            [(ngModel)]=\"password\"\r\n            (ngModelChange)=\"onPasswordChange()\"\r\n            minlength=\"8\"\r\n          />\r\n          <div\r\n            *ngIf=\"\r\n              password && passwordValue.dirty && passwordValue.errors?.minlength\r\n            \"\r\n            style=\"color: red\"\r\n          >\r\n            Password must be at least 8 characters long.\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"formGroup\">\r\n          <label for=\"confirmPassword\" class=\"label\">Confirm Password</label>\r\n          <input\r\n            type=\"password\"\r\n            name=\"confirmPassword\"\r\n            id=\"confirmPassword\"\r\n            placeholder=\"Confirm Password *\"\r\n            class=\"input-field\"\r\n            required\r\n            [(ngModel)]=\"confirmPassword\"\r\n            (ngModelChange)=\"onConfirmPasswordChange()\"\r\n            minlength=\"8\"\r\n          />\r\n          <div\r\n            *ngIf=\"\r\n              confirmPassword &&\r\n              confirmPasswordValue.dirty &&\r\n              confirmPasswordValue.errors?.minlength\r\n            \"\r\n            style=\"color: red\"\r\n          >\r\n            Password must be at least 8 characters long.\r\n          </div>\r\n          <div\r\n            *ngIf=\"\r\n              confirmPassword &&\r\n              confirmPasswordValue.dirty &&\r\n              !confirmPasswordValue.errors?.equal\r\n            \"\r\n            style=\"color: red\"\r\n          >\r\n            Password does not match.\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"sub-control\">\r\n          <div>\r\n            <button type=\"submit\" class=\"btn btnPrimary\">Sign Up</button>\r\n          </div>\r\n\r\n          <div class=\"other-links\">\r\n            <span>Or</span>\r\n            <span> Already have an account? </span>\r\n            <a routerLink=\"/login\">Log In</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</section>\r\n"
        },
        {
            "name": "VerifyEmailComponent",
            "id": "component-VerifyEmailComponent-d0a4d5910548a19e53835fc30de6253769c7d7be786362ce3c7ea12ebccb411c9b26de8ce2e2d779bbb9671dc9df9ece520c5e3a7668317a87a34be44ecbc84f",
            "file": "src/app/components/verify-email/verify-email.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-verify-email",
            "styleUrls": [
                "./verify-email.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./verify-email.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'Verify Email Address'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-verify-email',\r\n  templateUrl: './verify-email.component.html',\r\n  styleUrls: ['./verify-email.component.css'],\r\n})\r\nexport class VerifyEmailComponent implements OnInit {\r\n  title = 'Verify Email Address';\r\n  constructor(public authService: AuthService, private titleService: Title) {}\r\n  ngOnInit() {\r\n    this.titleService.setTitle(this.title);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sub-control {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  /* background-color: blueviolet; */\r\n}\r\n.other-links {\r\n  display: flex;\r\n  margin-top: 10px;\r\n  gap: 5px;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  /* background-color: rgb(144, 133, 154); */\r\n}\r\n.other-links > a {\r\n  color: blueviolet;\r\n  font-weight: bold;\r\n  display: inline-block;\r\n}\r\n",
                    "styleUrl": "./verify-email.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"section\">\r\n  <div class=\"container\" style=\"padding-bottom: 230px; padding-top: 80px\">\r\n    <div class=\"displayTableCell\">\r\n      <div class=\"authBlock\">\r\n        <h3 class=\"text-center\">Thank You for Registering</h3>\r\n        <div class=\"formGroup\" *ngIf=\"authService.userData as user\">\r\n          <p class=\"text-center\">\r\n            We have sent a confirmation email to\r\n            <strong>{{ user.email }}</strong\r\n            >.\r\n          </p>\r\n          <p class=\"text-center\">\r\n            Please check your email and click on the link to verfiy your email\r\n            address.\r\n          </p>\r\n        </div>\r\n\r\n        <!-- Calling SendVerificationMail() method using authService Api -->\r\n        <div class=\"sub-control\">\r\n          <div>\r\n            <button\r\n              type=\"button\"\r\n              class=\"btn btnPrimary\"\r\n              (click)=\"authService.sendVerificationMail()\"\r\n            >\r\n              Resend Verification Email\r\n            </button>\r\n          </div>\r\n          <div class=\"other-links\">\r\n            <span>Go back to</span>\r\n            <a class=\"redirect\" routerLink=\"/login\"> Sign in</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-dfa0099617a99ba4131a06da546d3e2cb651b71bbc6516a497d0e131d4508b088e615ad7e292e3392d9f47988fc8d8c26ea61f7463e4ec24a68c316ca17a3198",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule, Title } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { NavbarComponent } from './components/navbar/navbar.component';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { AboutComponent } from './components/about/about.component';\r\n\r\nimport { ContactComponent } from './components/contact/contact.component';\r\nimport { ResumeComponent } from './components/resume/resume.component';\r\nimport { PageNotFoundComponent } from './components/page-not-found/page-not-found.component';\r\nimport { ProjectsComponent } from './components/projects/projects.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { SignupComponent } from './components/signup/signup.component';\r\n\r\nimport { ExperienceComponent } from './components/experience/experience.component';\r\n\r\n// Firebase services + environment module\r\nimport { AngularFireModule } from '@angular/fire/compat';\r\nimport { AngularFireAuthModule } from '@angular/fire/compat/auth';\r\nimport { AngularFireStorageModule } from '@angular/fire/compat/storage';\r\nimport { AngularFirestoreModule } from '@angular/fire/compat/firestore';\r\nimport { AngularFireDatabaseModule } from '@angular/fire/compat/database';\r\nimport { environment } from '../environments/environment';\r\nimport { ForgotPasswordComponent } from './components/forgot-password/forgot-password.component';\r\nimport { VerifyEmailComponent } from './components/verify-email/verify-email.component';\r\nimport { FooterComponent } from './components/footer/footer.component';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AuthInterceptor } from './shared/interceptor/auth.interceptor';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavbarComponent,\r\n    HomeComponent,\r\n    AboutComponent,\r\n    ContactComponent,\r\n    ResumeComponent,\r\n    PageNotFoundComponent,\r\n    ProjectsComponent,\r\n    LoginComponent,\r\n    SignupComponent,\r\n    ForgotPasswordComponent,\r\n    VerifyEmailComponent,\r\n    FooterComponent,\r\n    ExperienceComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    AngularFireModule.initializeApp(environment.firebaseConfig),\r\n    AngularFireAuthModule,\r\n    AngularFirestoreModule,\r\n    AngularFireStorageModule,\r\n    AngularFireDatabaseModule,\r\n    IonicModule.forRoot({}),\r\n    HttpClientModule,\r\n    FormsModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: AuthInterceptor,\r\n      multi: true,\r\n    },\r\n    Title,\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AboutComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ContactComponent"
                        },
                        {
                            "name": "ExperienceComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "ForgotPasswordComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "NavbarComponent"
                        },
                        {
                            "name": "PageNotFoundComponent"
                        },
                        {
                            "name": "ProjectsComponent"
                        },
                        {
                            "name": "ResumeComponent"
                        },
                        {
                            "name": "SignupComponent"
                        },
                        {
                            "name": "VerifyEmailComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-56bfb78ad86ef7592d254a6f46f6376b09606aae8b6ac761f0e5beb5c2463193155c5a028c98f3505e9639c713ceecef75e663f24f3678ba107de7cbae6e9a34",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { HomeComponent } from './components/home/home.component';\r\n\r\nimport { ResumeComponent } from './components/resume/resume.component';\r\nimport { ContactComponent } from './components/contact/contact.component';\r\nimport { AboutComponent } from './components/about/about.component';\r\nimport { PageNotFoundComponent } from './components/page-not-found/page-not-found.component';\r\nimport { ProjectsComponent } from './components/projects/projects.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { SignupComponent } from './components/signup/signup.component';\r\n// route guard\r\nimport { AuthGuard } from './shared/guard/auth.guard';\r\nimport { ForgotPasswordComponent } from './components/forgot-password/forgot-password.component';\r\nimport { VerifyEmailComponent } from './components/verify-email/verify-email.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: HomeComponent },\r\n  { path: 'home', component: HomeComponent },\r\n  { path: 'projects', component: ProjectsComponent },\r\n  { path: 'resume', component: ResumeComponent },\r\n  { path: 'contact', component: ContactComponent, canActivate: [AuthGuard] },\r\n  { path: 'about', component: AboutComponent },\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'signup', component: SignupComponent },\r\n  { path: 'forgot-password', component: ForgotPasswordComponent },\r\n  { path: 'verify-email-address', component: VerifyEmailComponent },\r\n  { path: '**', component: PageNotFoundComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  firebaseConfig: {\r\n    apiKey: 'AIzaSyB0HinVYr0ewk1Td8Am8eGeF8bSnh7UnH0',\r\n    authDomain: 'personal-portfolio-887b0.firebaseapp.com',\r\n    projectId: 'personal-portfolio-887b0',\r\n    storageBucket: 'personal-portfolio-887b0.appspot.com',\r\n    messagingSenderId: '1062003293991',\r\n    appId: '1:1062003293991:web:936300cbfd292f23bc7302',\r\n  },\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  firebaseConfig: {\r\n    apiKey: 'AIzaSyB0HinVYr0ewk1Td8Am8eGeF8bSnh7UnH0',\r\n    authDomain: 'personal-portfolio-887b0.firebaseapp.com',\r\n    projectId: 'personal-portfolio-887b0',\r\n    storageBucket: 'personal-portfolio-887b0.appspot.com',\r\n    messagingSenderId: '1062003293991',\r\n    appId: '1:1062003293991:web:936300cbfd292f23bc7302',\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "home",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "projects",
                        "component": "ProjectsComponent"
                    },
                    {
                        "path": "resume",
                        "component": "ResumeComponent"
                    },
                    {
                        "path": "contact",
                        "component": "ContactComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "about",
                        "component": "AboutComponent"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "signup",
                        "component": "SignupComponent"
                    },
                    {
                        "path": "forgot-password",
                        "component": "ForgotPasswordComponent"
                    },
                    {
                        "path": "verify-email-address",
                        "component": "VerifyEmailComponent"
                    },
                    {
                        "path": "**",
                        "component": "PageNotFoundComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/about/about.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/contact/contact.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/experience/experience.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExperienceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/forgot-password/forgot-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page-not-found/page-not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageNotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/projects/projects.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/resume/resume.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResumeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/signup/signup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/verify-email/verify-email.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VerifyEmailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/guard/auth.guard.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interceptor/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/experience.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Experience",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/project.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Project",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/experience.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExperienceService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/project.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}